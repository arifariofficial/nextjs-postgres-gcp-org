generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String                 @unique
  password              String?
  salt                  String?
  role                  UserRole               @default(USER)
  emailVerified         DateTime?
  image                 String?
  balance               Float                  @default(500)
  accounts              Account[]
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  userPayment           UserPayment[]
  loginHistory          LoginHistory[]
  chats                 Chat[]

  @@map(name: "users")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map(name: "accounts")
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map(name: "verification_tokens")
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map(name: "password_reset_tokens")
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map(name: "two_factor_tokens")
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
  @@map(name: "two_factor_confirmations")
}

model LoginHistory {
  id        String   @id @default(cuid())
  userId    String
  email     String   @default("temp@example.com")
  loginAt   DateTime @default(now())
  ipAddress String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map(name: "login_history")
}

model UserPayment {
  id                    String @id @default(uuid())
  userId                String
  stripePaymentIntentId String @unique
  amount                Int
  paymentStatus         String
  user                  User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "user_payments")
}

model Chat {
  id        String    @id @default(uuid())
  title     String
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now())
  userId    String
  path      String
  sharePath String?
  messages  Message[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId]) // Improve query performance for chats by userId
  @@map("chats")
}

enum Role {
  user
  system
  assistant
}

model Message {
  id      String @id @default(uuid())
  role    Role   @default(user)
  content String
  chatId  String

  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@index([chatId]) // Improve query performance for messages by chatId
  @@map("messages")
}
