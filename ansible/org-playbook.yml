---
- name: Install Docker, Docker Compose, Git, Jenkins, GitLab, and Java on Debian GCP VM
  hosts: gcp-vm
  become: true
  vars:
    # Set the release codename for Debian
    release_codename: bookworm

  tasks:
    # Update apt repository cache
    - name: Update apt repository cache
      apt:
        update_cache: yes
        force_apt_get: yes

    # Install required packages
    - name: Install required packages
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
          - git
          - gnupg
          - lsb-release
          - iputils-ping
        state: present
        update_cache: yes

    # Install Java
    - name: Install Java
      apt:
        name: openjdk-17-jdk
        state: present

    # Verify Java installation
    - name: Verify Java installation
      command: java -version
      register: java_version_output

    - name: Print Java version
      debug:
        msg: "Java Version Installed: {{ java_version_output.stderr_lines }}"

    # Update ca-certificates
    - name: Update ca-certificates
      apt:
        name: ca-certificates
        state: latest
        update_cache: yes
        force_apt_get: yes

    # Install Docker components from Debian repository
    - name: Install Docker components
      apt:
        name:
          - docker.io
          - docker-compose
        state: latest
        update_cache: yes
      register: docker_install_result

    # Enable and start Docker service
    - name: Enable and start Docker service
      systemd:
        name: docker
        enabled: yes
        state: started

    # Check if Docker group exists
    - name: Check if Docker group exists
      ansible.builtin.getent:
        database: group
        key: docker
      register: docker_group

    # Create Docker group if it doesn't exist
    - name: Create Docker group
      ansible.builtin.group:
        name: docker
        state: present
      when: docker_group.failed is defined and docker_group.failed

    # Add user to Docker group
    - name: Add user to the Docker group
      user:
        name: "{{ ansible_user }}"
        groups: docker
        append: yes
      when: docker_group.failed is not defined or not docker_group.failed

    # Install Docker Compose
    - name: Download Docker Compose
      get_url:
        url: "https://github.com/docker/compose/releases/download/v2.25.0/docker-compose-linux-{{ ansible_architecture }}"
        dest: /usr/local/bin/docker-compose
        mode: "0755"

    - name: Verify Docker Compose installation
      shell: docker-compose --version
      register: docker_compose_version

    - name: Print Docker Compose version
      debug:
        msg: "{{ docker_compose_version.stdout }}"

- name: Set up Jenkins with custom user
  hosts: gcp-vm
  become: yes
  vars:
    jenkins_user: "sipeai8" # Change Jenkins user to sipeai8
  tasks:
    # Download Jenkins GPG key in ASCII format
    - name: Download Jenkins GPG key
      ansible.builtin.get_url:
        url: https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key
        dest: /usr/share/keyrings/jenkins-keyring.asc
        mode: "0644"

    # Add Jenkins repository
    - name: Add Jenkins repository
      ansible.builtin.apt_repository:
        repo: "deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] https://pkg.jenkins.io/debian-stable binary/"
        filename: "jenkins.list"
        state: present
        update_cache: yes

    # Install Jenkins
    - name: Install Jenkins
      ansible.builtin.apt:
        name: jenkins
        state: latest

    # Stop Jenkins service
    - name: Stop Jenkins service
      ansible.builtin.systemd:
        name: jenkins
        state: stopped

    # Change ownership of Jenkins directories to the custom user
    - name: Update Jenkins file permissions
      ansible.builtin.file:
        path: "{{ item }}"
        owner: "{{ jenkins_user }}"
        group: "{{ jenkins_user }}"
        recurse: yes
      loop:
        - /var/lib/jenkins
        - /var/cache/jenkins
        - /var/log/jenkins

    # Update Jenkins service configuration to use the custom user
    - name: Update Jenkins service configuration
      ansible.builtin.lineinfile:
        path: /lib/systemd/system/jenkins.service
        regexp: "^User=.*"
        line: "User={{ jenkins_user }}"
        backup: yes

    - name: Update Jenkins service group configuration
      ansible.builtin.lineinfile:
        path: /lib/systemd/system/jenkins.service
        regexp: "^Group=.*"
        line: "Group={{ jenkins_user }}"
        backup: yes

    # Reload systemd daemon
    - name: Reload systemd
      ansible.builtin.command:
        cmd: systemctl daemon-reload

    # Enable and start Jenkins service
    - name: Enable and start Jenkins service
      ansible.builtin.systemd:
        name: jenkins
        enabled: yes
        state: started

    # Add Jenkins user to Docker group
    - name: Add Jenkins user to Docker group
      ansible.builtin.user:
        name: "{{ jenkins_user }}"
        groups: docker
        append: yes

# Install Git and Clone Repository
- name: Install Git
  hosts: gcp-vm
  become: yes
  tasks:
    - name: Install Git
      apt:
        name: git
        state: present
        update_cache: yes

    - name: Clone the repository
      git:
        repo: https://github.com/arifariofficial/nextjs-postgres-gcp-org.git
        dest: /home/sipeai8/nextjs-postgres-gcp-org

# Git identity configuration
- name: Configure Git user settings
  hosts: gcp-vm
  become: yes
  vars:
    git_user_email: "ariful6@yahoo.com"
    git_user_name: "Ariful Islam"
  tasks:
    - name: Set global Git user email
      ansible.builtin.command:
        cmd: git config --global user.email "{{ git_user_email }}"

    - name: Set global Git user name
      ansible.builtin.command:
        cmd: git config --global user.name "{{ git_user_name }}"
    - name: Copy environment file to the remote server
      ansible.builtin.copy:
        src: "{{ local_env_file }}"
        dest: "{{ remote_env_path }}"
        owner: sipeai8
        group: sipeai8
        mode: "0644"

# Install SSL certificate
- name: Install Certbot and Obtain SSL Certificate
  hosts: all
  become: yes
  tasks:
    - name: Ensure Certbot is installed
      apt:
        name: certbot
        state: present
        update_cache: yes

    - name: Obtain SSL certificate using Certbot
      command: >
        certbot certonly --standalone
        -d {{ domain }}
        --email {{ email }}
        --non-interactive
        --agree-tos
      register: certbot_output

    - name: Debug Certbot output
      debug:
        var: certbot_output.stdout
